#include <WiFi.h>
#include <WiFiClient.h>
#include <PubSubClient.h> 
#include <OneWire.h>
#include<DallasTemperature.h> 
#include <Filters.h> //Easy library to do the calculations
#include <analogWrite.h>

#define ONE_WIRE_BUS 15 // ds18b20 analog pin
#define S0  2
#define S1  4
#define S2  18
#define S3  19
#define OUT 5

#define LedRed 7
#define LedBlue 8

#define ZMPT101B 34;                            //Analog input of voltage sensor
const int trigPin = 12;
const int echoPin = 13;
const char ledPin = 2;      //IBM status indicator

const int sensorIn = 35;    //Current Sensor input
int mVperAmp = 185; // use 185 for 5A, 100 for 20A Module and 66 for 30A Module


int duration;               //Oil level
int distance;               //oil level

int R,B = 0;                //Color sensor values

double Voltage = 0;
double VRMS = 0;
double AmpsRMS = 0;
float oil_temperature;
float testFrequency = 50;                     // test signal frequency (Hz)  |zmpt101b
float windowLength = 100/testFrequency;       // zmpt101b how long to average the signal, for statistist, changing this can have drastic effect
int secondary_voltage;
int secondary_current;
int RawValue = 0;     //voltage sensor
float Volts_TRMS;     // estimated actual voltage in Volts(zmot101b)
float intercept = 0;  // to be adjusted based on calibration testing (zmot101b)
float slope = 1;      // (zmot101b)

char silica_gel_color;
unsigned long printPeriod = 1000; //Measuring frequency, every 1s, can be changed
unsigned long previousMillis = 0;

RunningStatistics inputStats; //This class collects the value so we can apply some functions



const char* ssid = "Wireless Hub";
const char* password = "3;P*Th3s^TqT";


OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature DS18B20(&oneWire);


#define ORG "5ez1rt"
#define DEVICE_TYPE "ESP32"
#define DEVICE_ID "247F671C5210"
#define TOKEN "*iiD3&n2ylF1)WJWYQ"


char server[] = ORG ".messaging.internetofthings.ibmcloud.com";
char pubTopic1[] = "iot-2/evt/oil level/fmt/json";
char pubTopic2[] = "iot-2/evt/oil temperature/fmt/json";
char pubTopic3[] = "iot-2/evt/silica gel color/fmt/json";
char pubTopic4[] = "iot-2/evt/secondary voltage/fmt/json";
char pubTopic5[] = "iot-2/evt/secondary current/fmt/json";
char subTopic[] = "iot-2/cmd/test/fmt/String";
char authMethod[] = "use-token-auth";
char token[] = TOKEN;
char clientId[] = "d:" ORG ":" DEVICE_TYPE ":" DEVICE_ID;

WiFiClient wifiClient;
PubSubClient client(server, 1883, NULL, wifiClient);

void receivedCallback(char* pubTopic, byte* payload, unsigned int length) {
  Serial.print("Message received: ");
  Serial.println(pubTopic);

  Serial.print("payload: ");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();
  /* we got '1' -> on */
}

void setup() {
    Serial.begin(115200);

    Serial.println();
    DS18B20.begin();
    pinMode(ledPin, OUTPUT);   //IBM status indicator


     /*io of ultrasonic sensor*/
    pinMode(trigPin, OUTPUT); // Sets the trigPin as an Output
    pinMode(echoPin, INPUT); // Sets the echoPin as an Input

    /*io of color sensor*/
    pinMode(S0, OUTPUT);
    pinMode(S1, OUTPUT);
    pinMode(S2, OUTPUT);
    pinMode(S3, OUTPUT);
    pinMode(OUT, INPUT);

    pinMode(LedRed, OUTPUT);
    pinMode(LedBlue, OUTPUT);
    
    // Setting frequency-scaling to 20%
    digitalWrite(S0,HIGH);
    digitalWrite(S1,LOW);

    // To make the color indicator LED blink
  for (int i=0; i<=5; i++){
    digitalWrite(LedRed, !digitalRead(LedRed));
    digitalWrite(LedBlue, !digitalRead(LedBlue));
    delay(250);
  }

     /*io of current sensor*/
    pinMode(35, INPUT);
    delay(10);
    Serial.println(F("Initialising Voltage sensor"));


    //voltage sensor program extension
    inputStats.setWindowSecs( windowLength );
  
    Serial.println("Tracking and control of transformer using IOT");
    
    Serial.print("Connecting to "); 
    Serial.print(ssid);
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
      delay(500);
      Serial.print(".");
    } 
    Serial.println("");
    
    Serial.print("WiFi connected, IP address: "); 
    Serial.println(WiFi.localIP());

    if (!client.connected()) {
        Serial.print("Reconnecting client to ");
        Serial.println(server);
        while (!client.connect(clientId, authMethod, token)) {
            Serial.print(".");
            delay(500);
        }
        client.setCallback(receivedCallback);
        if (client.subscribe(subTopic)) {
            Serial.println("subscribe to cmd OK");
        } else {
            Serial.println("subscribe to cmd FAILED");
        }
        Serial.println("IBM Watson IoT connected");
    }
}

long lastMsg = 0;


void loop() {

    client.loop();
    long now = millis();
    if (now - lastMsg > 3000) {
        lastMsg = now;

      /*program for ultrasonic sensor starts here*/
      digitalWrite(trigPin, LOW);  // Get Start
      delayMicroseconds(2); // stable the line 
      digitalWrite(trigPin, HIGH); // sending 10 us pulse
      delayMicroseconds(10); // delay 
      digitalWrite(trigPin, LOW); // after sending pulse wating to receive signals 
      duration = pulseIn(echoPin, HIGH); // calculating time 
      distance = (duration/2) / 29.1; // single path 
        //duration = analogRead(echoPin);
        //delay(100);
        //distance= duration*0.034/2;

        /*program for temperature sensor starts here*/
        DS18B20.requestTemperatures(); 
        float temperatureC = DS18B20.getTempCByIndex(0);
        float temperatureF = DS18B20.getTempFByIndex(0);
        Serial.print(temperatureC);
        Serial.println("ºC");
        Serial.print(temperatureF);
        Serial.println("ºF");
        delay(5000);

         // Setting red filtered photodiodes to be read Red frequency
         digitalWrite(S2,LOW);
         digitalWrite(S3,LOW);
         R = pulseIn(OUT, LOW);  // Reading the output Red frequency
         delay(100); 
        // Setting Blue filtered photodiodes to be read Blue frequency
        digitalWrite(S2,LOW);
        digitalWrite(S3,HIGH);
        B = pulseIn(OUT, LOW);  // Reading the output Blue frequency
        delay(100);
       // Print RGB Sensor Values
       Serial.print("R= "); 
       Serial.print(R);
       Serial.print(" | ");
       Serial.print("B= ");
       Serial.print(B);
       Serial.println();
       delay(200);


       /*program for voltage sensor starts here*/
       ReadVoltage();  //The only function I'm running, be careful when using with this kind of boards
                     //Do not use very long delays, or endless loops inside the loop

       /*program for current sensor starts here*/
       Voltage = getVPP();
       VRMS = (Voltage/2.0) *0.707; // sq root  
       AmpsRMS = (VRMS * 1000)/mVperAmp;
       float Wattage = (220*AmpsRMS)-18; //Observed 18-20 Watt when no load was connected,so substracting offset value to get real consumption.
       Serial.print(AmpsRMS);
       Serial.println(" Amps RMS ");
       Serial.print(Wattage);
       Serial.println(" Watt ");


       
    
                  
        String payload1 = "{\"d\":{\"Name\":\"" DEVICE_ID "\"";
               payload1 += ",\"distance\":";
               payload1 += distance;
               payload1 += "}}";
        Serial.print("Sending payload1: ");
        Serial.println(payload1);

        if (client.publish(pubTopic1, (char*) payload1.c_str())) {
            Serial.println("Publish ok");
        } else {
            Serial.println("Publish failed");
        }


        String payload2 = "{\"d\":{\"Name\":\"" DEVICE_ID "\"";
               payload2 += ",\"oil_temperature\":";
               payload2 += oil_temperature;
               payload2 += "}}";
        Serial.print("Sending payload2: ");
        Serial.println(payload2);

        if (client.publish(pubTopic2, (char*) payload2.c_str())) {
            Serial.println("Publish ok");
        } else {
            Serial.println("Publish failed");
        }


        String payload3 = "{\"d\":{\"Name\":\"" DEVICE_ID "\"";
               payload3 += ",\"silica_gel_color\":";
               payload3 += silica_gel_color;
               payload3 += "}}";
        Serial.print("Sending payload3: ");
        Serial.println(payload3);

        if (client.publish(pubTopic3, (char*) payload3.c_str())) {
            Serial.println("Publish ok");
        } else {
            Serial.println("Publish failed");
        }


        String payload4 = "{\"d\":{\"Name\":\"" DEVICE_ID "\"";
               payload4 += ",\"secondary_voltage\":";
               payload4 += secondary_voltage;
               payload4 += "}}";
        Serial.print("Sending payload4: ");
        Serial.println(payload4);

        if (client.publish(pubTopic4, (char*) payload4.c_str())) {
            Serial.println("Publish ok");
        } else {
            Serial.println("Publish failed");
        }


        String payload5 = "{\"d\":{\"Name\":\"" DEVICE_ID "\"";
               payload5 += ",\"secondary current\":";
               payload5 += secondary_current;
               payload5 += "}}";
        Serial.print("Sending payload5: ");
        Serial.println(payload5);

        if (client.publish(pubTopic5, (char*) payload5.c_str())) {
            Serial.println("Publish ok");
        } else {
            Serial.println("Publish failed");
        }
    }
}

/* voltage sensor function below*/
float ReadVoltage(){
    RawValue = analogRead(ZMPT101B);  // read the analog in value:
    inputStats.input(RawValue);       // log to Stats function
        
    if((unsigned long)(millis() - previousMillis) >= printPeriod) { //We calculate and display every 1s
      previousMillis = millis();   // update time
      
      Volts_TRMS = inputStats.sigma()* slope + intercept;
//      Volts_TRMS = Volts_TRMS*0.979;              //Further calibration if needed
      
      Serial.print("Non Calibrated: ");
      Serial.print("\t");
      Serial.print(inputStats.sigma()); 
      Serial.print("\t");
      Serial.print("Calibrated: ");
      Serial.print("\t");
      Serial.println(Volts_TRMS);
    
  }
}




/* current sensor function below*/
float getVPP()
{
float result;
int readValue; //value read from the sensor
int maxValue = 0; // store max value here
int minValue = 1024; // store min value here
uint32_t start_time = millis();
while((millis()-start_time) < 1000) //sample for 1 Sec
{
readValue = analogRead(sensorIn);
// see if you have a new maxValue
if (readValue > maxValue)
{
/*record the maximum sensor value*/
maxValue = readValue;
}
if (readValue < minValue)
{
/*record the maximum sensor value*/
minValue = readValue;
}
/* Serial.print(readValue);
Serial.println(" readValue ");
Serial.print(maxValue);
Serial.println(" maxValue ");
Serial.print(minValue);
Serial.println(" minValue ");
delay(1000); */
}
// Subtract min from max
result = ((maxValue - minValue) * 5)/1024.0;
return result;
}

